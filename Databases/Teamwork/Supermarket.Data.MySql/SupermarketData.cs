#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;


namespace Supermarket.Data.MySql	
{
	public partial class SupermarketData : OpenAccessContext, ISupermarketDataUnitOfWork
	{
        private static string connectionStringName = @"connectionId";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
		
			
		private static MetadataSource metadataSource = new SupermarketDataMetadataSource();
	
		public SupermarketData()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public SupermarketData(string connection)
			:base(connection, backend, metadataSource)
		{ }
	
		public SupermarketData(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public SupermarketData(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public SupermarketData(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "MySql";
			backend.ProviderName = "MySql.Data.MySqlClient";
			return backend;
		}

        public IQueryable<Product> Products
        {
            get
            {
                return this.GetAll<Product>();
            }
        }

        public IQueryable<Vendor> Vendors
        {
            get
            {
                return this.GetAll<Vendor>();
            }
        }

        public IQueryable<Measure> Measures
        {
            get
            {
                return this.GetAll<Measure>();
            }
        }

        public void UpdateSchema()
        {
            var handler = this.GetSchemaHandler();
            string script = null;
            try
            {
                script = handler.CreateUpdateDDLScript(null);
            }
            catch
            {
                bool throwException = false;
                try
                {
                    handler.CreateDatabase();
                    script = handler.CreateDDLScript();
                }
                catch
                {
                    throwException = true;
                }
                if (throwException)
                    throw;
            }
            if (string.IsNullOrEmpty(script) == false)
            {
                handler.ExecuteDDLScript(script);
            }
        }
	}

	public interface ISupermarketDataUnitOfWork : IUnitOfWork
	{
        IQueryable<Product> Products
        {
            get;
        }

        IQueryable<Vendor> Vendors
        {
            get;
        }

        IQueryable<Measure> Measures
        {
            get;
        }
	}
}
