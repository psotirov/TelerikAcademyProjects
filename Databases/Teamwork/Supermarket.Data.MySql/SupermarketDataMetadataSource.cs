#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using Telerik.OpenAccess.Metadata.Relational;

namespace Supermarket.Data.MySql
{

	public partial class SupermarketDataMetadataSource : FluentMetadataSource
	{
		
		protected override IList<MappingConfiguration> PrepareMapping()
		{
			List<MappingConfiguration> mappingConfigurations = new List<MappingConfiguration>();

            MappingConfiguration<Vendor> vendorConfiguration = new MappingConfiguration<Vendor>();
            vendorConfiguration.MapType(v => new
            {
                VendorId = v.Id,
                VendorName = v.Name,
            }).ToTable("Vendors");
            vendorConfiguration.HasProperty(v => v.Id).IsIdentity();

            MappingConfiguration<Measure>measureConfiguration = new MappingConfiguration<Measure>();
            measureConfiguration.MapType(m => new
            {
                MeasureId = m.Id,
                MeasureName = m.Name,
            }).ToTable("Measures");
            measureConfiguration.HasProperty(m => m.Id).IsIdentity();

            MappingConfiguration<Product> productConfiguration = new MappingConfiguration<Product>();
            productConfiguration.MapType(p => new
            {
                ProductId = p.Id,
                ProductName = p.Name,
                VendorId=p.VendorId,
                MeasureId=p.MeasureId,
                BasePrice=p.BasePrice
            }).ToTable("Products");
            productConfiguration.HasProperty(p => p.Id).IsIdentity();

            productConfiguration.HasAssociation(p => p.Vendor).ToColumn("VendorId");

            productConfiguration.HasAssociation(p => p.Measure).ToColumn("MeasureId");

            mappingConfigurations.Add(productConfiguration);
            mappingConfigurations.Add(vendorConfiguration);
            mappingConfigurations.Add(measureConfiguration);

			return mappingConfigurations;
		}
		
		protected override void SetContainerSettings(MetadataContainer container)
		{
			container.NameGenerator.RemoveCamelCase = false;
			container.NameGenerator.SourceStrategy = Telerik.OpenAccess.Metadata.NamingSourceStrategy.Property;
		}
	}
}
